import datetime
from functions.post.post_func import PostPostObj
from functions.schedule.schedule_func import ScheduleObj
from functions.user.user_func import UserObj, check_status
from keyboards import keyb
from misc import bot, dp


@dp.callback_query_handler(lambda call: call.data == '–°–æ–∑–¥–∞—Ç—å_–ø–æ—Å—Ç')
async def main_plan_menu(call):
    uid = call.from_user.id
    await bot.send_message(uid, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:', reply_markup=keyb.cancel())
    user = UserObj(uid)
    user.set_status('–ñ–¥–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞')


@dp.message_handler(lambda msg: check_status(msg.from_user.id) == '–ñ–¥–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞')
async def create_post_hand(msg):
    uid = msg.from_user.id
    text = msg.text
    await bot.send_message(uid, '–ü—Ä–∏—à–ª–∏—Ç–µ —á–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å @ —á–µ—Ä–µ–∑ , –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø–æ—Å—Ç:', reply_markup=keyb.cancel())
    post_id = PostPostObj.create_post(text=text)
    user = UserObj(uid)
    user.set_status(f'–ñ–¥–µ–º —á–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞;{post_id}')


@dp.message_handler(lambda msg: check_status(msg.from_user.id).split(';')[0] == '–ñ–¥–µ–º —á–∞—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞')
async def wait_chats_post(msg):
    uid = msg.from_user.id
    chats = msg.text
    user = UserObj(uid)
    post_id = user.status().split(';')[1]
    post = PostPostObj(post_id)
    if '@' in chats:
        for chat_uname in chats.split(', '):
            chat = await bot.get_chat(chat_uname)
            chat_id = chat.id

            post.add_chat(chat_id)

        await bot.send_message(uid, '–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 21.03.2021 10:30')
        user.set_status(f'–ñ–¥–µ–º –¥–∞—Ç—É–≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞;{post_id}')
    else:
        await bot.send_message(uid, '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ @ –≤ —Ç–µ–∫—Å—Ç–µ')


@dp.message_handler(lambda msg: check_status(msg.from_user.id).split(';')[0] == '–ñ–¥–µ–º –¥–∞—Ç—É–≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞')
async def wait_dt_first_post(msg):
    uid = msg.from_user.id
    dt = msg.text

    user = UserObj(uid)
    post_id = user.status().split(';')[1]
    post = PostPostObj(post_id)

    dt_save = datetime.datetime.strptime(dt, f'%d.%m.%Y %H:%M')
    post.set_dt_start(dt_save)

    await bot.send_message(uid, '–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:'
                                '24:00 - —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏\n'
                                '168:00 - —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n\n'
                                '0 - —Ä–∞–∑–æ–≤—ã–π –ø–æ—Å—Ç')

    user.set_status(f'–ñ–¥–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å—Ç–∞;{post_id}')


@dp.message_handler(lambda msg: check_status(msg.from_user.id).split(';')[0] == '–ñ–¥–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å—Ç–∞')
async def wait_timer_first_post(msg):
    uid = msg.from_user.id
    timer = msg.text

    user = UserObj(uid)
    post_id = user.status().split(';')[1]

    post = PostPostObj(post_id)
    post.set_timer(timer)

    await bot.send_message(uid, '–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞?', reply_markup=keyb.add_media_post(post_id))


@dp.callback_query_handler(lambda call: call.data.split(';')[0] == '–î–æ–±–∞–≤–∏—Ç—å_–º–µ–¥–∏–∞')
async def add_media_menu_hand(call):
    uid = call.from_user.id
    post_id = call.data.split(';')[1]
    user = UserObj(uid)

    await bot.send_message(uid, '–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞\n\n'
                                '–ö–æ–≥–¥–∞ –ø—Ä–∏—à–ª–µ—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ –∏ –¥–æ–∂–¥–µ—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá',
                           reply_markup=keyb.finish_media(post_id))

    user.set_status(f'–ñ–¥–µ–º_–º–µ–¥–∏–∞_–ø–æ—Å—Ç;{post_id}')


@dp.callback_query_handler(lambda call: call.data.split(';')[0] == '–ó–∞–≤–µ—Ä—à–∏—Ç—å_–º–µ–¥–∏–∞')
async def finish_media_post(call):
    uid = call.from_user.id

    post_id = call.data.split(';')[1]
    post = PostPostObj(post_id)

    await post.send_post(uid)

    await bot.send_message(uid, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç?', reply_markup=keyb.apply_post(post_id))

    user = UserObj(uid)
    user.set_status('pass')


@dp.callback_query_handler(lambda call: call.data.split(';')[0] == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å_–º–µ–¥–∏–∞')
async def miss_media_menu(call):
    uid = call.from_user.id
    post_id = call.data.split(';')[1]
    post = PostPostObj(post_id)

    await post.send_post(uid)

    await bot.send_message(uid, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å—Ç?', reply_markup=keyb.apply_post(post_id))


@dp.callback_query_handler(lambda call: call.data.split(';')[0] == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å_–ø–æ—Å—Ç')
async def apply_plan_menu(call):
    uid = call.from_user.id
    post_id = call.data.split(';')[1]
    post = PostPostObj(post_id)

    # push post to schedule
    await ScheduleObj().update_schedule(post, True)

    await post.send_post(post)
    await bot.send_message(uid, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ.', reply_markup=keyb.admin_panel())
